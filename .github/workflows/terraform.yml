name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  id-token: write

env:
  TF_WORKSPACE: "dev"
  PROJECT_ROOT: ${{ github.workspace }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  install_dependencies:
    name: 'Install Dependencies'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m venv .venv
        source .venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

  code_quality:
    name: 'Code Quality Checks'
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install additional tools
      run: |
        python -m venv .venv
        source .venv/bin/activate
        ./scripts/setup_environment.sh

    - name: Run project validation
      run: |
        source .venv/bin/activate
        ./scripts/validate_workflow.sh

    - name: Generate documentation
      run: |
        source .venv/bin/activate
        ./scripts/docs_generator.py

  security_analysis:
    name: 'Security Analysis'
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: environments/dev

  terraform_format:
    name: 'Terraform Format'
    needs: [install_dependencies]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

  infrastructure_plan:
    name: 'Infrastructure Plan'
    needs: [code_quality, security_analysis, terraform_format]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      id: init
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Validate
      id: validate
      run: |
        cd environments/dev
        terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        cd environments/dev
        terraform plan -no-color -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform_apply:
    name: 'Terraform Apply'
    needs: [infrastructure_plan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Terraform Init
      run: |
        cd environments/dev
        terraform init

    - name: Terraform Apply
      run: |
        cd environments/dev
        terraform apply -auto-approve

  post_deployment_validation:
    name: 'Post Deployment Validation'
    needs: [terraform_apply]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Infrastructure
      run: |
        echo "Running post-deployment validation checks..."
        # Add your validation steps here
